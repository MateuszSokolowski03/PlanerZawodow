# Generated by Django 5.2 on 2025-05-05 20:54

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='kolejka',
            fields=[
                ('id_kolejki', models.AutoField(primary_key=True, serialize=False)),
                ('numer', models.IntegerField()),
                ('nazwa', models.CharField(blank=True, max_length=100)),
                ('data_rozpoczecia', models.DateTimeField()),
                ('data_zakonczenia', models.DateTimeField()),
                ('czy_zakonczona', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Kolejka',
                'verbose_name_plural': 'Kolejki',
                'ordering': ['numer'],
            },
        ),
        migrations.CreateModel(
            name='uzytkownik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('typ_uzytkownika', models.CharField(choices=[('organizator', 'Organizator'), ('kapitan', 'Kapitan'), ('fan', 'Fan')], default='fan', max_length=20)),
                ('telefon', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='Numer telefonu musi mieć 9 cyfr.', regex='^\\d{9}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Użytkownik',
                'verbose_name_plural': 'Użytkownicy',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='kapitan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('potwierdzony', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kapitan_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Kapitan',
                'verbose_name_plural': 'Kapitanowie',
            },
        ),
        migrations.CreateModel(
            name='druzyna',
            fields=[
                ('id_druzyny', models.AutoField(primary_key=True, serialize=False)),
                ('nazwa', models.CharField(max_length=50)),
                ('herb_url', models.URLField(blank=True)),
                ('data_utworzenia', models.DateTimeField(auto_now_add=True)),
                ('id_kapitana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.kapitan')),
            ],
            options={
                'verbose_name': 'Drużyna',
                'verbose_name_plural': 'Drużyny',
            },
        ),
        migrations.CreateModel(
            name='mecz',
            fields=[
                ('id_meczu', models.AutoField(primary_key=True, serialize=False)),
                ('data_meczu', models.DateTimeField()),
                ('wynik_gospodarz', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('wynik_gosc', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('planowany', 'planowany'), ('rozpoczety', 'rozpoczety'), ('zakonczony', 'zakonczony')], default='planowany', max_length=20)),
                ('sedzia_glowny', models.CharField(max_length=50)),
                ('miejsce', models.CharField(max_length=100)),
                ('id_kolejki', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.kolejka')),
            ],
            options={
                'verbose_name': 'Mecz',
                'verbose_name_plural': 'Mecze',
            },
        ),
        migrations.CreateModel(
            name='organizator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imie', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Imię nie może zawierać cyfr.', regex='^[^\\d]*$')])),
                ('nazwisko', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Nazwisko nie może zawierać cyfr.', regex='^[^\\d]*$')])),
                ('PESEL', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='PESEL musi mieć 11 cyfr.', regex='^\\d{11}$')])),
                ('data_dolaczenia', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organizator_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organizator',
                'verbose_name_plural': 'Organizatorzy',
            },
        ),
        migrations.CreateModel(
            name='powiadomienie',
            fields=[
                ('id_powiadomienia', models.AutoField(primary_key=True, serialize=False)),
                ('tresc', models.TextField()),
                ('data_wyslania', models.DateTimeField(auto_now_add=True)),
                ('przeczytane', models.BooleanField(default=False)),
                ('typ', models.CharField(choices=[('systemowe', 'systemowe'), ('rejestracja', 'rejestracja'), ('mecz', 'mecz')], max_length=20)),
                ('id_uzytkownika', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Powiadomienie',
                'verbose_name_plural': 'Powiadomienia',
            },
        ),
        migrations.CreateModel(
            name='zawodnik',
            fields=[
                ('id_zawodnika', models.AutoField(primary_key=True, serialize=False)),
                ('imie', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z]+$', 'Imię może zawierać tylko litery.')])),
                ('nazwisko', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z]+$', 'Nazwisko może zawierać tylko litery.')])),
                ('data_urodzenia', models.DateField()),
                ('pozycja', models.CharField(choices=[('bramkarz', 'Bramkarz'), ('obronca', 'Obrońca'), ('pomocnik', 'Pomocnik'), ('napastnik', 'Napastnik')], max_length=50)),
                ('numer_koszulki', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('zdjecie_url', models.URLField(blank=True)),
                ('id_druzyny', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.druzyna')),
            ],
            options={
                'verbose_name': 'Zawodnik',
                'verbose_name_plural': 'Zawodnicy',
            },
        ),
        migrations.CreateModel(
            name='wydarzenie',
            fields=[
                ('id_wydarzenia', models.AutoField(primary_key=True, serialize=False)),
                ('minuta', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='Minuta nie może być mniejsza niż 0.'), django.core.validators.MaxValueValidator(120, message='Minuta nie może być większa niż 120.')])),
                ('typ', models.CharField(choices=[('bramka', 'Bramka'), ('kartka_zolta', 'Kartka Żółta'), ('kartka_czerwona', 'Kartka Czerwona'), ('zmiana', 'Zmiana'), ('rzut_karny', 'Rzut Karny')], max_length=20)),
                ('komentarz', models.TextField(blank=True)),
                ('id_druzyny', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.druzyna')),
                ('id_meczu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.mecz')),
                ('id_zawodnika', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.zawodnik')),
            ],
            options={
                'verbose_name': 'Wydarzenie',
                'verbose_name_plural': 'Wydarzenia',
            },
        ),
        migrations.CreateModel(
            name='zawody',
            fields=[
                ('id_zawodu', models.AutoField(primary_key=True, serialize=False)),
                ('nazwa', models.CharField(max_length=50)),
                ('data_rozpoczecia', models.DateTimeField()),
                ('data_zakonczenia', models.DateTimeField()),
                ('status', models.CharField(choices=[('oczekujaca', 'oczekujaca'), ('zatwierdzona', 'zatwierdzona'), ('odrzucona', 'odrzucona'), ('anulowane', 'Anulowane')], default='planowane', max_length=20)),
                ('opis', models.TextField()),
                ('czy_otwarta', models.BooleanField(default=False)),
                ('maks_zespolow', models.IntegerField()),
                ('regulaminy', models.TextField()),
                ('id_organizatora', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.organizator')),
            ],
            options={
                'verbose_name': 'Zawody',
                'verbose_name_plural': 'Zawody',
            },
        ),
        migrations.AddField(
            model_name='mecz',
            name='id_zawodu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.zawody'),
        ),
        migrations.AddField(
            model_name='kolejka',
            name='id_zawodu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.zawody'),
        ),
        migrations.CreateModel(
            name='zgloszenie',
            fields=[
                ('id_zgloszenia', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('oczekujaca', 'Oczekująca'), ('zatwierdzona', 'Zatwierdzona'), ('odrzucona', 'Odrzucona')], default='oczekujaca', max_length=20)),
                ('data_rejestracji', models.DateTimeField(auto_now_add=True)),
                ('punkty', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('bramki_zdobyte', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('bramki_stracone', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('id_druzyny', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.druzyna')),
                ('id_zawodu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zawodowplaner.zawody')),
            ],
            options={
                'verbose_name': 'Zgłoszenie',
                'verbose_name_plural': 'Zgłoszenia',
                'unique_together': {('id_zawodu', 'id_druzyny')},
            },
        ),
        migrations.AddField(
            model_name='mecz',
            name='druzyna_gosc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goscie', to='zawodowplaner.zgloszenie'),
        ),
        migrations.AddField(
            model_name='mecz',
            name='druzyna_gospodarz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gospodarze', to='zawodowplaner.zgloszenie'),
        ),
        migrations.AlterUniqueTogether(
            name='kolejka',
            unique_together={('id_zawodu', 'numer')},
        ),
    ]
